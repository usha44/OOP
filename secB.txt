secB 1. Explain method overloading in Java with examples. How is it different from method
overriding?
In Java, method overloading means having multiple methods with the same name but different parameter lists in the same class. 
It is a way to perform a similar operation in different ways depending on the input. 
For example, we can create a method add(int a, int b) to add integers and another method add(double a, double b) to add decimal numbers. 
The compiler determines which version to call based on the arguments provided.

On the other hand, method overriding occurs when a subclass provides its own version of a method that is already defined in the parent class. 
The method must have the same name, return type, and parameters. This allows the subclass to change or extend the behavior of the method. 
For example, a base class Animal might have a method makeSound(), and the Dog class can override it to give a specific implementation. 
The main difference is that overloading is done within the same class and is resolved at compile time, whereas overriding happens between a subclass and superclass and is resolved at runtime.

2. What is the role of the super keyword in Java? Demonstrate its usage with a code example.

The super keyword in Java is used to refer to the parent class of the current object. 
It is especially useful when a subclass wants to call the constructor or method of its superclass. 
This helps in reusing code and maintaining the relationship between parent and child classes. 
For example, if a parent class Animal has a constructor and a method speak(), the subclass Dog can use super() 
to call the parent constructor and super.speak() to call the parent's method inside the child class.
class Animal {
    Animal() {
        System.out.println("Animal Constructor");
    }

    void speak() {
        System.out.println("Animal speaks");
    }
}

class Dog extends Animal {
    Dog() {
        super(); 
        System.out.println("Dog Constructor");
    }

    void show() {
        super.speak(); 
    }
}